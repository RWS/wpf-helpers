# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

stages:
- stage: Build
  displayName: 'Build Community WPF Helpers'
  jobs:
  - job: Do_Build
    displayName: 'Do build'
    pool:
      name: Studio-OX
      demands:
      - msbuild
      - Agent.ComputerName -equals CLJVMOX2017A2
      - visualstudio
    steps:
    - task: NuGetToolInstaller@0
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: 
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'new'
        arguments: 'tool-manifest'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'tool'
        arguments: 'install fake-cli'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'custom'
        custom: 'fake'
        arguments: 'run build.fsx'
    # - task: CmdLine@2
    #   inputs:
    #     script: |
    #       .\build.cmd BuildAndCreatePackages RELEASE
      
    #       displayName: 'Start building the Community WPF Helpers'
     #task: NuGetCommand@2
      #inputs:
      #  command: 'custom'
       # arguments: '"install" "FAKE.Core" "-OutputDirectory" "tools" "-ExcludeVersion"'
    #- task: NuGetCommand@2
     # inputs:
        #command: 'restore'
       # restoreSolution: '**/*.sln'
        #feedsToUse: 'select'
    # - task: CmdLine@2
    #   displayName: 'Start building the Community WPF Helpers'
    #   inputs:
    #     script: 
    #       .\CommunityWPFHelpers\build.cmd CreatePackages RELEASE
      
#     - task: PublishBuildArtifacts@1
#       inputs:
#         PathtoPublish: '$(Build.SourcesDirectory)\packaging'
#         ArtifactName: 'community-wpfhelpers-drop'
#         publishLocation: 'Container'

# - stage: Publish_Beta
#   displayName: 'Publish beta version on private feed'
#   jobs:
#   - deployment: Publish_Beta
#     displayName: 'Publish on azure internal devops feed'
#     pool:
#       vmImage: 'vs2017-win2016'
#     environment: 'Azure DevOps feed'
#     strategy:
#       runOnce:
#         deploy:
#           steps:

#           - task: NuGetCommand@2
#             inputs:
#               command: 'push'
#               packagesToPush: '$(Agent.BuildDirectory)/**/*.nupkg;!$(Agent.BuildDirectory)/**/*.symbols.nupkg'
#               nuGetFeedType: 'internal'
#               publishVstsFeed: '7b173346-9ceb-4f8d-a243-d8a5e82731d0'
#               allowPackageConflicts: true

# - stage: Publish_Nuget
#   displayName: 'Publish nuget packages'
#   jobs:
#   - deployment: Publish_Nuget
#     displayName: 'Publish on azure external devops feed'
#     pool:
#       vmImage: 'vs2017-win2016'
#     environment: 'Azure DevOps feed'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: NuGetCommand@2
#             inputs:
#               command: 'push'
#               packagesToPush: '$(Agent.BuildDirectory)/**/*.nupkg;!$(Agent.BuildDirectory)/**/*.symbols.nupkg'
#               nuGetFeedType: 'external'
#               publishFeedCredentials: 'Nuget'
#               allowPackageConflicts: true